Link : https://practice.geeksforgeeks.org/problems/subset-sums2234/1

Index : 
1. Solution


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 

TC : O(2^n)+O(2^n log(2^n)). Each index has two ways. You can either pick it up or not pick it. 
      So for n index time complexity for O(2^n) and for sorting it will take (2^n log(2^n)).
      
SC : O(2^n) for storing subset sums, since 2^n subsets can be generated for an array of size n.


**CODE**

class Solution{
    ArrayList<Integer> subsetSums(ArrayList<Integer> arr, int N){
        // code here
        ArrayList<Integer> sumSubset=new ArrayList<>();
        solUtil(0,0,arr,N,sumSubset);
        
        Collections.sort(sumSubset);
        return sumSubset;
    }
    
    public void solUtil(int index,int sum,ArrayList<Integer> arr,int N,ArrayList<Integer> sumSubset){

        if(index==N){
            sumSubset.add(sum);
            return;
        }        
        
        solUtil(index+1,sum+arr.get(index),arr,N,sumSubset);
        solUtil(index+1,sum,arr,N,sumSubset);
    }
}
