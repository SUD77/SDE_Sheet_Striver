Leetcode link: https://leetcode.com/problems/3sum/

Index : 
1. Note
2. Solution : Optimized one

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Note :

1. Naive approach is O(n^3) . i.e by using 3 for loops



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution : Optimized one

TC : O(n*n), n is the size of array
SC : O(1) (Technically)

**CODE**

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        Set<List<Integer>> result=new HashSet<>();
        
        if(nums.length==0) return new ArrayList<>(result);
        
        Arrays.sort(nums);
        
        
        for(int i=0;i<nums.length-2;i++){
            
            int j=i+1;
            int k=nums.length-1;
            
            while(j<k){
                
                int sum=nums[i]+nums[j]+nums[k];
                if(sum==0) result.add(Arrays.asList(nums[i],nums[j++],nums[k--]));
                else if(sum>0)k--;
                else if(sum<0)j++;
            }
        }
        
        return new ArrayList<>(result);
    }
}
