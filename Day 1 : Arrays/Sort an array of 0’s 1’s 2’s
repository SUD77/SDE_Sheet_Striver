Leetcode Link: https://leetcode.com/problems/sort-colors/

Index :
1. Notes
2. Solution 1: My Solution
3. Solution 2: Optimized (Striver)



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1: My Solution 
TC : O(3*n) + O(n), n is the size of array
SC : O(1)


Logic : 
1. Used count sort, to store the count of 0,1,2
2. Used that count array to refil the existing nums array.

**CODE**

class Solution {
    public void sortColors(int[] nums) {
        
        int[] countArray=new int[3];
        int itr=0;
        
        for(int x:nums){
            countArray[x]++;
        }
        
        
        for(int i=0;i<3;i++){
            
            for(int j=0;j<countArray[i];j++){
                nums[itr++]=i;
            }
        }
    }
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2: Optimized (Striver)
TC : O(n), n is the size of array
SC: O(1)


**CODE**

class Solution {
    public void sortColors(int[] nums) {
        
        int low=0;
        int high=nums.length-1;
        int mid=0;
        
        int temp;
        
        while(mid<=high){
            
            switch(nums[mid]){
                    
                case 0: {
                    
                    temp=nums[low];
                    nums[low]=nums[mid];
                    nums[mid]=temp;
                    low++;
                    mid++;
                    break;
                }
                case 1: 
                    mid++;
                    break;
                case 2: {
                    temp=nums[mid];
                    nums[mid]=nums[high];
                    nums[high]=temp;
                    high--;
                    break;
                }
            }
            
        }
    }
}
