Leetcode link: https://leetcode.com/problems/majority-element/

Index : 

1. Note
2. Solution 1 : My Solution (using Hashmap)
3. Solution 2 : Optimized (Moore's Voting algo)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Note : 

1. For optimized solution and intuition, check striver's video.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1. Solution 1 : My Solution (using Hashmap)

TC : O(n) , n is size of array
SC : O(n)


**CODE**

class Solution {
    public int majorityElement(int[] nums) {
        
        HashMap<Integer,Integer> eleCount=new HashMap<>();
        
        for(int x:nums){
            eleCount.put(x,eleCount.getOrDefault(x,0)+1);
        }
        
        System.out.println(eleCount);
        
        for(int x:nums){
            if(eleCount.get(x)> (int) Math.floor(nums.length/2)) return x;
        }
         
        return -1;
        
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2. Solution 2 : Optimized (Moore's Voting algo)

TC : O(n) , n is size of array
SC : O(1)


**CODE**

class Solution {
    public int majorityElement(int[] nums) {
        
        int count=0;
        int candidate=0;
        
        for(int x:nums){
            
            if(count==0){
                candidate=x;
            }
            
            if(x==candidate) count+=1;
            else count-=1;
        }
        
        return candidate;
    }
}
