Link : https://practice.geeksforgeeks.org/problems/depth-first-traversal-for-a-graph/1

Index :
1. Solution 


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 

TC : O(N+E), Where N is the time taken for visiting N nodes and E is for travelling through adjacent nodes.
SC : O(N+E)+O(N)+O(N) , Space for adjacency list, Array,Auxiliary space.


**CODE**

class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        
        ArrayList<Integer> ans=new ArrayList<>();
        boolean[] visited=new boolean[V];
        
        for(int i=0;i<V;i++){
            
            if(!visited[i]){
                dfs(i,adj,visited,ans);
            }
        }
        
        return ans;
    }
    
    public void dfs(int node,ArrayList<ArrayList<Integer>> adj,boolean[] visited,ArrayList<Integer> ans){
        
        visited[node]=true;
            
        ans.add(node);
        
        for(Integer x:adj.get(node)){
            
            if(!visited[x]){
                dfs(x,adj,visited,ans);
            }
        }
    }
}
