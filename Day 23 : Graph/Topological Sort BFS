Link : 

Index : 
1. Solution 


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 


**CODE**



/*Complete the function below*/


class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int topo[]=new int[V];
        int indegree[]=new int[V];
        
        for(int i=0;i<V;i++){
            for(Integer x:adj.get(i)){
                indegree[x]++;
            }
        }
        
        Queue<Integer> q=new LinkedList<>();
        
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        
        int ind=0;
        
        while(!q.isEmpty()){
            
            Integer node=q.poll();
            topo[ind++]=node;
            
            for(Integer y:adj.get(node)){
                indegree[y]--;
                if(indegree[y]==0)
                    q.add(y);
            }
            
        }
        
        return topo;
    }
}
