Link : https://www.codingninjas.com/codestudio/problems/implement-trie_1387095?leftPanelTab=0


Index : 
1. Solution 


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 

**CODE**

import java.util.* ;
import java.io.*; 

class TrieNode {
    
    TrieNode[] children=new TrieNode[26];
    int countEndWith=0;
    int countPrefix=0;
    
    public TrieNode(){}
    
    boolean containsKey(char ch){
        return children[ch-'a']!=null;
    }
    
    TrieNode get(char ch){
        return children[ch-'a'];
    }
    
    void put(char ch,TrieNode node){
        children[ch-'a']=node;
    }
    
    void increaseEnd(){
        countEndWith++;
    }
    
    void increasePrefix(){
        countPrefix++;
    }
    
    void deleteEnd(){
        countEndWith--;
    }
    
    void reducePrefix(){
        countPrefix--;
    }
    
    int getEnd(){
        return countEndWith;
    }
    
    int getPrefix(){
        return countPrefix;
    }
}

public class Trie {
    
    private TrieNode root;
    
    public Trie() {
        // Write your code here.
        root=new TrieNode();
    }

    public void insert(String word) {
        // Write your code here.
        TrieNode node=root;
        
        for(int i=0;i<word.length();i++){
            
            if(!node.containsKey(word.charAt(i))){
                node.put(word.charAt(i),new TrieNode());
            }
            node=node.get(word.charAt(i));
            node.increasePrefix();
        }
        node.increaseEnd();
    }

    public int countWordsEqualTo(String word) {
        // Write your code here.
        TrieNode node=root;
        
        for(int i=0;i<word.length();i++){
            
            if(node.containsKey(word.charAt(i))){
                node=node.get(word.charAt(i));
            }else{
                return 0;
            }
        }
        return node.getEnd();
    }

    public int countWordsStartingWith(String word) {
        // Write your code here.
        
        TrieNode node=root;
        
        for(int i=0;i<word.length();i++){
            
            if(node.containsKey(word.charAt(i))){
                node=node.get(word.charAt(i));
            }else{
                return 0;
            }
        }
        
        return node.getPrefix();
    }

    public void erase(String word) {
        // Write your code here.
        
        TrieNode node=root;
        
        for(int i=0;i<word.length();i++){
            
            if(node.containsKey(word.charAt(i))){
                node=node.get(word.charAt(i));
                node.reducePrefix();
            }else{
                return;
            }
        }
        node.deleteEnd();
    }

}
