Link : https://www.interviewbit.com/problems/subarray-with-given-xor/

Index : 
1. Solution : Striver's


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution : Striver's

TC : O(n*log(n))
SC : O(n)


**CODE**

public class Solution {
    public int solve(int[] A, int B) {
        
        HashMap<Integer,Integer> freq=new HashMap<Integer,Integer>();
        
        int count=0;
        int xorr=0;
        
        int n=A.length;
        
        for(int i=0;i<n;i++){
            
            xorr=xorr ^ A[i];
            
            if(freq.get(xorr^B) !=null){
                count+=freq.get(xorr^B);
            }
            if(xorr==B){
                count++;
            }
            if(freq.get(xorr)!=null)
                freq.put(xorr,freq.get(xorr)+1);
            else freq.put(xorr,1);
        }
        
        return count;
    }
}
