Link : https://practice.geeksforgeeks.org/problems/job-sequencing-problem-1587115620/1#

Index : 
1. Solution

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution : 

TC : O(nlogn) + O(n * (deadline))
SC : O(Deadline)

**CODE**

class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        // Your code here
        int maxDeadline=0;
        
        for(int i=0;i<arr.length;i++){
            maxDeadline=Math.max(maxDeadline,arr[i].deadline);
        }
        
        Arrays.sort(arr, (a,b)-> b.profit-a.profit);
        
        int result[]=new int[2];
        int count=0;
        
        Set<Integer> xSet=new HashSet<>();
        int totalProfit=0;
        
        for(int i=0;i<arr.length;i++){
            
            for(int j=arr[i].deadline-1;j>=0;j--){
                
                if(!xSet.contains(j)){
                    
                    xSet.add(j);
                    totalProfit+=arr[i].profit;
                    count++;
                    break;
                }
            }
        }
        
        result[0]=count;
        result[1]=totalProfit;
        
        return result;
    }
}

/*
class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}
*/
