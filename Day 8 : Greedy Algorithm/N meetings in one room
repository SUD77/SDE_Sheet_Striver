Link : https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1

Index : 

1. Solution : Optimized


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution : Optimized

TC : O(n) + O(nlogn) == O(nlogn)
SC : O(n)

**CODE**

//{ Driver Code Starts
import java.io.*;
import java.util.*;
import java.lang.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());

        while (t-- > 0) {
            String inputLine[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);

            int start[] = new int[n];
            int end[] = new int[n];

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++)
                start[i] = Integer.parseInt(inputLine[i]);

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) 
                end[i] = Integer.parseInt(inputLine[i]);
                
            int ans = new Solution().maxMeetings(start, end, n);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    
    class Meeting{
        
        int start;
        int end;
        
        Meeting(){
            
        }
        
        public Meeting(int start,int end){
            this.start=start;
            this.end=end;
        }
        
    }
    
    public int maxMeetings(int start[], int end[], int n)
    {
        
        Meeting[] meeting=new Meeting[n];
        
        for(int i=0;i<n;i++){
            meeting[i]=new Meeting(start[i],end[i]);
        }
        
        return getMaxMeeting(meeting);
        
        
    }
    
    public int getMaxMeeting(Meeting[] meeting){
        
        Arrays.sort(meeting,new MeetingComparator());
        
        int maxMeetings=0;
        int prefinishTime=0;
        
        for(int i=0;i<meeting.length;i++){
            
            if(meeting[i].start>prefinishTime){
                maxMeetings++;
                prefinishTime=meeting[i].end;
            }
        }
        
        return maxMeetings;
    }
    
    class MeetingComparator implements Comparator<Meeting>{
        
        public int compare(Meeting m1,Meeting m2){
            return m1.end-m2.end;
        }
    }
}
