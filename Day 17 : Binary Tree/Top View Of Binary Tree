Link : 


Index :
1. Solution 


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 

**CODE**

import java.util.*;
class Pair{
    BinaryTreeNode node;
    int hd;
    
    public Pair(BinaryTreeNode node,int hd){
        this.node=node;
        this.hd=hd;
    }
}
public class Solution {
	public static ArrayList<Integer> getTopView(BinaryTreeNode root) {
		// Write your code here.
        ArrayList<Integer> ans=new ArrayList<>();
        
        if(root==null) return ans;
        
        Map<Integer,Integer> map=new TreeMap<>();
        Queue<Pair> q=new LinkedList<Pair>();
        q.add(new Pair(root,0));
        
        while(!q.isEmpty()){
            
            Pair it=q.remove();
            int hd=it.hd;
            
            BinaryTreeNode temp=it.node;
            
            if(map.get(hd)==null) map.put(hd,temp.val);
            if(temp.left!=null){
                q.add(new Pair(temp.left,hd-1));
            }
            
            if(temp.right!=null){
                q.add(new Pair(temp.right,hd+1));
            }
        }
        
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            ans.add(entry.getValue());
        }
        
        return ans;
	}
}
