Link : https://leetcode.com/problems/maximum-width-of-binary-tree/

Index :
1. Solution 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution :

TC : O(n)
SC : O(n)

**CODE**

class Pair{
    TreeNode node;
    int index;
    
    Pair(TreeNode node,int index){
        this.node=node;
        this.index=index;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        
        if(root==null) return 0;
        int ans=0;
        Queue<Pair> q=new LinkedList<>();
        
        q.offer(new Pair(root,0));
        
        while(!q.isEmpty()){
            
            int size=q.size();
            int minIndexAtCurrentLevel=q.peek().index;
            
            int first=0,last=0;
            
            for(int i=0;i<size;i++){
                
                int cur_id=q.peek().index- minIndexAtCurrentLevel ;
                TreeNode node=q.peek().node;
                q.poll();
                
                if(i==0) first=cur_id;
                if(i==size-1) last=cur_id;
                
                if(node.left !=null)
                    q.offer(new Pair(node.left,cur_id*2+1));
                if(node.right!=null)
                    q.offer(new Pair(node.right,cur_id*2+2));
                
            }
            ans=Math.max(ans,last-first+1);
            
            
        }
        
        return ans;
        
    }
}
